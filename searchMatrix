class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = size(matrix);
        if(m == 0){
            return false;
        }
        
        int n = size(matrix[0]);
        if(m == 1){
            for(int i=0;i<n;i++)
            {
                if(matrix[0][i] == target){
                    return true;
                }

            }
            return false;
        }
        int index =-1;
        if(matrix[0][0] > target || matrix[m-1][n-1] < target){
            return false;
        }
        if(matrix[0][0] == target || matrix[m-1][n-1] == target){
            return true;
        }
        for(int i=0;i<m;i++){
            cout<<matrix[i][0];
            cout<<"index:"<<index<<"\n";
            if(matrix[i][0] == target){
                    return true;
                }
                if(matrix[i][0] >target){
                    index = i-1;
                     cout<<"index:"<<index<<"\n";
                    break;
                   
                }
                else if(matrix[i][0] < target && target < matrix[m-1][n-1]){
                    index = i;
                }
                
        }
        if(index == -1){
            return false;
        }
        int left = 0;
        int right = n-1;
        int mid;
        while(left<=right){
            mid = left+(right-left)/2;
            cout<<matrix[index][mid]<<endl;
            if(matrix[index][mid] == target){
                return true;
            }
            if(target > matrix[index][mid]){
                left = mid+1;

            }
            else{
                right = mid-1;
            }

        }
        
        return false;
    }
    
    
};
